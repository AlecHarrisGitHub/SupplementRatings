name: Deploy to EC2

# Trigger on pushes to main
on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      # 1. Check out your code
      - uses: actions/checkout@v3

      # Build frontend in CI
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci

      - name: Build frontend
        env:
          AMAZON_AFFILIATE_LINK_HOME: ${{ secrets.AMAZON_AFFILIATE_LINK_HOME }}
          AMAZON_AFFILIATE_LINK_CATEGORY: ${{ secrets.AMAZON_AFFILIATE_LINK_CATEGORY }}
          # Also expose VITE_* equivalents for completeness
          VITE_AFFILIATE_HOME_LINK: ${{ secrets.AMAZON_AFFILIATE_LINK_HOME }}
          VITE_AFFILIATE_CATEGORY_LINK: ${{ secrets.AMAZON_AFFILIATE_LINK_CATEGORY }}
        run: |
          cd frontend
          npm run build

      - name: Upload frontend build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist

      # 2. Start an SSH agent and load your private key
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # 3. Add your server to known_hosts (so SSH won't prompt)
      - name: Add remote host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.REMOTE_HOST }} >> ~/.ssh/known_hosts

      # Download the build artifact and deploy to EC2
      - name: Download frontend build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend_dist

      - name: Copy frontend build to EC2
        run: |
          scp -o StrictHostKeyChecking=no -r frontend_dist/* ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }}:~/SupplementRatings/frontend_dist/

      # 4. SSH in, back-up DB, pull, rebuild, restart
      - name: Deploy to EC2
        run: |
          ssh ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            set -e
            cd ~/SupplementRatings

            # ---------- 1) back-up existing DB ----------
            # backup_dir="/home/ec2-user/db_backups"
            # mkdir -p "$backup_dir"
            # if [ -f db.sqlite3 ]; then
            #   echo "⏳  Backing up db.sqlite3…"
            #   cp db.sqlite3 "$backup_dir/db.sqlite3.$(date +%Y%m%d%H%M%S)"
            # fi

            # ---------- 2) pull latest code ----------
            git fetch origin
            git reset --hard origin/main

            # ---------- 3) restore DB (if missing) ----------
            # if [ ! -f db.sqlite3 ] && ls "$backup_dir"/db.sqlite3.* >/dev/null 2>&1; then
            #   echo "🔄  Restoring db.sqlite3…"
            #   latest_backup=$(ls -t "$backup_dir"/db.sqlite3.* | head -n 1)
            #   cp "$latest_backup" db.sqlite3
            # fi

            # ---------- 4) rebuild & restart ----------
            if [ ! -f .env ]; then
              sudo cp /home/ec2-user/env_backups/.env .env
              sudo chown ec2-user:ec2-user .env
            fi

            source ~/env_backups/venv/bin/activate
            pip install -r requirements.txt

            # No frontend build here; just collectstatic and migrate
            python manage.py collectstatic --noinput
            python manage.py migrate

            sudo systemctl restart gunicorn
            sudo systemctl reload nginx
          EOF
